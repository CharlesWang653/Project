{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n/**\n * The options defined on a string schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options; // SchemaStringOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaStringOptions\n */\n\n\nclass SchemaStringOptions extends SchemaTypeOptions {}\n\nconst opts = {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: null\n};\n/**\n * Array of allowed values for this path\n *\n * @api public\n * @property enum\n * @memberOf SchemaStringOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'enum', opts);\n/**\n * Attach a validator that succeeds if the data string matches the given regular\n * expression, and fails otherwise.\n *\n * @api public\n * @property match\n * @memberOf SchemaStringOptions\n * @type RegExp\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'match', opts);\n/**\n * If truthy, Mongoose will add a custom setter that lowercases this string\n * using JavaScript's built-in `String#toLowerCase()`.\n *\n * @api public\n * @property lowercase\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'lowercase', opts);\n/**\n * If truthy, Mongoose will add a custom setter that removes leading and trailing\n * whitespace using JavaScript's built-in `String#trim()`.\n *\n * @api public\n * @property trim\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'trim', opts);\n/**\n * If truthy, Mongoose will add a custom setter that uppercases this string\n * using JavaScript's built-in `String#toUpperCase()`.\n *\n * @api public\n * @property uppercase\n * @memberOf SchemaStringOptions\n * @type Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'uppercase', opts);\n/**\n * If set, Mongoose will add a custom validator that ensures the given\n * string's `length` is at least the given number.\n *\n * @api public\n * @property minlength\n * @memberOf SchemaStringOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'minlength', opts);\n/**\n * If set, Mongoose will add a custom validator that ensures the given\n * string's `length` is at most the given number.\n *\n * @api public\n * @property maxlength\n * @memberOf SchemaStringOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'maxlength', opts);\n/*!\n * ignore\n */\n\nmodule.exports = SchemaStringOptions;","map":null,"metadata":{},"sourceType":"script"}