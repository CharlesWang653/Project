{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst Decimal128 = require('../types/decimal128');\n\nconst ObjectId = require('../types/objectid');\n\nconst utils = require('../utils');\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n\n  if (update && utils.isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({\n      transform: false,\n      virtuals: false\n    }));\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val; // Avoid going into mixed paths if schema is specified\n\n    const keySchema = schema && schema.path && schema.path(path + key);\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n\n      const flat = flatten(val, path + key, options, schema);\n\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n  }\n\n  return result;\n}\n/*!\n * ignore\n */\n\n\nfunction modifiedPaths(update, path, result) {\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n    result[path + key] = true;\n\n    if (utils.isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({\n        transform: false,\n        virtuals: false\n      });\n    }\n\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n\n  return result;\n}\n/*!\n * ignore\n */\n\n\nfunction shouldFlatten(val) {\n  return val && typeof val === 'object' && !(val instanceof Date) && !(val instanceof ObjectId) && (!Array.isArray(val) || val.length > 0) && !(val instanceof Buffer) && !(val instanceof Decimal128);\n}","map":null,"metadata":{},"sourceType":"script"}