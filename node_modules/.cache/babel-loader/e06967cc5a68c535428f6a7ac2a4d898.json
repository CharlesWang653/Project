{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\n\nconst Document = require('../document');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc) {\n  // TODO: replace this with `new CoreMongooseArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreMongooseArray();\n  arr[arrayAtomicsSymbol] = {};\n\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    for (let i = 0; i < len; ++i) {\n      _basePush.call(arr, values[i]);\n    }\n\n    arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol] || {};\n  }\n\n  arr[arrayPathSymbol] = path;\n  arr[arraySchemaSymbol] = void 0; // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n  }\n\n  return arr;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = MongooseArray;","map":null,"metadata":{},"sourceType":"script"}