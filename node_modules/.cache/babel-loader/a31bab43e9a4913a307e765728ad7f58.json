{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst express = require('express');\n\nvar bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  //此项必须在 bodyParser.json 下面,为参数编码\n  extended: true\n}));\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(function (req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\"); // update to match the domain you will make the request from\n\n  res.header(\"Access-Control-Allow-Methods\", \"GET, PUT, POST, DELETE\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\napp.get('/api/users', (req, res) => {\n  let search = req.query.search;\n  let sortArea = req.query.sortArea;\n  let sortFunc = req.query.sortFunc;\n  let page = req.query.page;\n  const reg = new RegExp(search, 'i');\n  User.find({\n    $or: [//多条件，数组\n    {\n      Name: {\n        $regex: reg\n      }\n    }, {\n      Sex: {\n        $regex: reg\n      }\n    }, {\n      StartDate: {\n        $regex: reg\n      }\n    }, {\n      Rank: {\n        $regex: reg\n      }\n    }, {\n      Phone: {\n        $regex: reg\n      }\n    }, {\n      Email: {\n        $regex: reg\n      }\n    }]\n  }).skip((page - 1) * 2).limit(2).sort([[sortArea, sortFunc]]).exec((err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).send(user);\n    }\n  });\n});\napp.get('/api/users/:id', (req, res) => {\n  let userId = req.params.id;\n  User.findById(userId, (err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).send(user);\n    }\n  });\n});\napp.get('/api/users/:id/DS', (req, res) => {\n  let userId = req.params.id;\n  User.find({\n    Superior: userId\n  }, (err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).json(user);\n    }\n  });\n});\napp.put('/api/users/:id', (req, res) => {\n  let userId = req.params.id;\n  User.findByIdAndUpdate(userId, req.body, (err, result) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).json({\n        message: \"good\"\n      });\n    }\n  });\n});\napp.put('/api/users/:id/DS', (req, res) => {\n  let userId = req.params.id;\n  User.findByIdAndUpdate(userId, {\n    $push: {\n      DS: req.body.id\n    }\n  }, (err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).json(user);\n    }\n  });\n});\napp.post('/api/users', (req, res) => {\n  let createPromise = User.create(req.body);\n  createPromise.then(() => {\n    User.find(req.body, (err, user) => {\n      res.status(200).json(user[user.length - 1]._id);\n    });\n  });\n});\napp.delete('/api/users/:id', (req, res) => {\n  let userId = req.params.id;\n  User.findByIdAndDelete(userId, (err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).json({\n        message: \"good\"\n      });\n    }\n  });\n});\napp.delete('/api/users/:OfficerId/DS/:DSId', (req, res) => {\n  let OfficerId = req.params.OfficerId;\n  let DSId = req.params.DSId;\n  User.findByIdAndUpdate(OfficerId, {\n    $pull: {\n      DS: DSId\n    }\n  }, (err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).json(user);\n    }\n  });\n});\napp.delete('/api/users/:DSId/superior', (req, res) => {\n  let DSId = req.params.DSId;\n  User.findByIdAndUpdate(DSId, {\n    Superior: \"\"\n  }, (err, user) => {\n    if (err) {\n      res.status(500).json(err);\n    } else {\n      res.status(200).json(user);\n    }\n  });\n});\napp.listen(8888, () => console.log('Listening on port 8888!')); // connect\n\nmongoose.connect('mongodb://CharlesDB:wch30624@' + 'cluster0-shard-00-00-5dkpv.mongodb.net:27017,' + 'cluster0-shard-00-01-5dkpv.mongodb.net:27017,' + 'cluster0-shard-00-02-5dkpv.mongodb.net:27017/Project2?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true&w=majority', {\n  useNewUrlParser: true\n});\nvar Schema = mongoose.Schema; // var ObjectId = mongoose.Schema.Types.ObjectId;\n\nvar userSchema = new Schema({\n  Avatar: String,\n  Name: String,\n  Sex: String,\n  Rank: String,\n  StartDate: String,\n  Phone: String,\n  Email: String,\n  Superior: String,\n  DS: [String]\n}); // get persistent class\n\nconst User = mongoose.model(\"user\", userSchema, 'Army');","map":{"version":3,"sources":["/Users/charleswang/Desktop/coding learning/web/projects/project2/src/server/server.js"],"names":["mongoose","require","express","bodyParser","app","use","json","urlencoded","extended","req","res","next","header","get","search","query","sortArea","sortFunc","page","reg","RegExp","User","find","$or","Name","$regex","Sex","StartDate","Rank","Phone","Email","skip","limit","sort","exec","err","user","status","send","userId","params","id","findById","Superior","put","findByIdAndUpdate","body","result","message","$push","DS","post","createPromise","create","then","length","_id","delete","findByIdAndDelete","OfficerId","DSId","$pull","listen","console","log","connect","useNewUrlParser","Schema","userSchema","Avatar","String","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\nconst express = require('express');\nvar bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({            //此项必须在 bodyParser.json 下面,为参数编码\n  extended: true\n}));\napp.use(express.urlencoded({ extended: true }));\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\",\"http://localhost:3000\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Methods\", \"GET, PUT, POST, DELETE\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n\napp.get('/api/users', (req, res) => {\n  let search = req.query.search;\n  let sortArea = req.query.sortArea;\n  let sortFunc = req.query.sortFunc;\n  let page = req.query.page;\n  const reg = new RegExp(search,'i');\n  User\n    .find({\n      $or : [ //多条件，数组\n        {Name : {$regex : reg}},\n        {Sex : {$regex : reg}},\n        {StartDate : {$regex : reg}},\n        {Rank : {$regex : reg}},\n        {Phone : {$regex : reg}},\n        {Email : {$regex : reg}}\n        ]\n      })\n    .skip((page - 1)*2)\n    .limit(2)\n    .sort([[sortArea, sortFunc]])\n    .exec((err, user) => {\n      if (err) {\n        res.status(500).json(err);\n      }\n      else {\n        res.status(200).send(user);\n      }\n    })\n\t}\n);\napp.get('/api/users/:id', (req, res) => {\n  let userId = req.params.id;\n\tUser.findById(userId, (err, user) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n\t\t\tres.status(200).send(user);\n\t\t}\n\t});\n});\napp.get('/api/users/:id/DS', (req, res) => {\n\tlet userId = req.params.id;\n\tUser.find({Superior: userId}, (err, user) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n      res.status(200).json(user)\n\t\t}\n\t});\n});\n\n\napp.put('/api/users/:id', (req, res) => {\n\tlet userId = req.params.id;\n\tUser.findByIdAndUpdate(userId, req.body, (err, result) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n\t\t\tres.status(200).json({message:\"good\"});\n\t\t}\n\t});\n});\n\napp.put('/api/users/:id/DS', (req, res) => {\n\tlet userId = req.params.id;\n\tUser.findByIdAndUpdate(userId, { $push: { DS: req.body.id}}, (err, user) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n\t\t\tres.status(200).json(user);\n\t\t}\n\t});\n});\n\napp.post('/api/users', (req, res) => {\n\tlet createPromise = User.create(req.body);\n  createPromise.then(() => {\n    User\n      .find(req.body, (err, user) => {\n        res.status(200).json(user[user.length - 1]._id);\n      })\n  });\n});\napp.delete('/api/users/:id', (req, res) => {\n\tlet userId = req.params.id;\n\tUser.findByIdAndDelete(userId, (err, user) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n\t\t\tres.status(200).json({message:\"good\"});\n\t\t}\n\t});\n});\napp.delete('/api/users/:OfficerId/DS/:DSId', (req, res) => {\n  let OfficerId = req.params.OfficerId;\n  let DSId = req.params.DSId;\n\tUser.findByIdAndUpdate(OfficerId, { $pull: { DS: DSId}}, (err, user) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n\t\t\tres.status(200).json(user);\n\t\t}\n\t});\n});\napp.delete('/api/users/:DSId/superior', (req, res) => {\n  let DSId = req.params.DSId;\n\tUser.findByIdAndUpdate(DSId, {Superior:\"\"}, (err, user) => {\n\t\tif (err) {\n\t\t\tres.status(500).json(err);\n\t\t}\n\t\telse {\n\t\t\tres.status(200).json(user);\n\t\t}\n\t});\n});\n\n\n\n\n\napp.listen(8888, () => \n                    console.log('Listening on port 8888!')\n                );\n\n// connect\nmongoose.connect( 'mongodb://CharlesDB:wch30624@'+\n                  'cluster0-shard-00-00-5dkpv.mongodb.net:27017,'+\n                  'cluster0-shard-00-01-5dkpv.mongodb.net:27017,'+\n                  'cluster0-shard-00-02-5dkpv.mongodb.net:27017/Project2?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true&w=majority',\n{\n  useNewUrlParser: true\n});\nvar Schema = mongoose.Schema;\n// var ObjectId = mongoose.Schema.Types.ObjectId;\nvar userSchema = new Schema({\n  Avatar: String,\n  Name: String,\n  Sex: String,\n  Rank: String,\n  StartDate: String,\n  Phone: String,\n  Email: String,\n  Superior: String,\n  DS: [String]\n});\n// get persistent class\nconst User = mongoose.model(\"user\",userSchema,'Army');"]},"metadata":{},"sourceType":"module"}